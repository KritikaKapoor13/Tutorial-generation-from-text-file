{"ast":null,"code":"var _jsxFileName = \"D:\\\\College\\\\Capstone project\\\\Final\\\\frontend\\\\new-ui\\\\src\\\\components\\\\pages\\\\StudentAssessment\\\\Quiz.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Question from './Question';\nimport QuestionCount from './QuestionCount';\nimport AnswerOption from './AnswerOption';\nimport { CSSTransitionGroup } from 'react-transition-group';\n\nfunction Quiz(props) {\n  console.log(props);\n\n  function shuffle(array) {\n    console.log(\"hi\");\n    var currentIndex = array.length,\n        temporaryValue,\n        randomIndex; // While there remain elements to shuffle...\n\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1; // And swap it with the current element.\n\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  function renderAnswerOptions(key) {\n    return /*#__PURE__*/React.createElement(AnswerOption, {\n      key: key,\n      answerContent: key // answerType={key.type}\n      ,\n      answer: props.answer,\n      questionId: props.questionId,\n      correct_answer: props.correct_answer,\n      onAnswerSelected: props.onAnswerSelected,\n      status: \"not_taken\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(CSSTransitionGroup, {\n    className: \"container\",\n    component: \"div\",\n    transitionName: \"fade\",\n    transitionEnterTimeout: 800,\n    transitionLeaveTimeout: 500,\n    transitionAppear: true,\n    transitionAppearTimeout: 500,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    key: props.questionId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(QuestionCount, {\n    counter: props.questionId,\n    total: props.questionTotal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Question, {\n    content: props.question,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"answerOptions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }, shuffle(props.answerOptions).map(renderAnswerOptions)), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }), props.answer && props.answer !== props.correct_answer ? /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 65\n    }\n  }, \"Correct answer is \", props.correct_answer) : false));\n} //   Quiz.propTypes = {\n//     answer: PropTypes.string.isRequired,\n//     answerOptions: PropTypes.array.isRequired,\n//     counter: PropTypes.number.isRequired,\n//     question: PropTypes.string.isRequired,\n//     questionId: PropTypes.number.isRequired,\n//     questionTotal: PropTypes.number.isRequired,\n//     onAnswerSelected: PropTypes.func.isRequired\n//   };\n\n\nexport default Quiz;","map":{"version":3,"sources":["D:/College/Capstone project/Final/frontend/new-ui/src/components/pages/StudentAssessment/Quiz.js"],"names":["React","PropTypes","Question","QuestionCount","AnswerOption","CSSTransitionGroup","Quiz","props","console","log","shuffle","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","renderAnswerOptions","key","answer","questionId","correct_answer","onAnswerSelected","questionTotal","question","answerOptions","map"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Question from './Question';\r\nimport QuestionCount from './QuestionCount';\r\nimport AnswerOption from './AnswerOption';\r\nimport { CSSTransitionGroup } from 'react-transition-group';\r\n\r\nfunction Quiz(props) {\r\n    console.log(props);\r\n    function shuffle(array) {\r\n      console.log(\"hi\");\r\n      var currentIndex = array.length, temporaryValue, randomIndex;\r\n    \r\n      // While there remain elements to shuffle...\r\n      while (0 !== currentIndex) {\r\n    \r\n        // Pick a remaining element...\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex -= 1;\r\n    \r\n        // And swap it with the current element.\r\n        temporaryValue = array[currentIndex];\r\n        array[currentIndex] = array[randomIndex];\r\n        array[randomIndex] = temporaryValue;\r\n      }\r\n    \r\n      return array;\r\n    }\r\n    function renderAnswerOptions(key) {\r\n        return (\r\n          <AnswerOption\r\n            key={key}\r\n            answerContent={key}\r\n            // answerType={key.type}\r\n            answer={props.answer}\r\n            questionId={props.questionId}\r\n            correct_answer={props.correct_answer}\r\n            onAnswerSelected={props.onAnswerSelected}\r\n            status=\"not_taken\"\r\n          />\r\n        );\r\n      }\r\n    return (\r\n      <CSSTransitionGroup\r\n      className=\"container\"\r\n      component=\"div\"\r\n      transitionName=\"fade\"\r\n      transitionEnterTimeout={800}\r\n      transitionLeaveTimeout={500}\r\n      transitionAppear\r\n      transitionAppearTimeout={500}\r\n    >\r\n        <div key={props.questionId}>\r\n          <QuestionCount\r\n            counter={props.questionId}\r\n            total={props.questionTotal}\r\n          />\r\n          <Question content={props.question} />\r\n          <ul className=\"answerOptions\">\r\n            {shuffle(props.answerOptions).map(renderAnswerOptions)}\r\n          </ul>\r\n          <br></br>\r\n          {props.answer && props.answer!==props.correct_answer? <h2>Correct answer is {props.correct_answer}</h2>:false}\r\n        </div>\r\n        </CSSTransitionGroup>\r\n    );\r\n  }\r\n  \r\n//   Quiz.propTypes = {\r\n//     answer: PropTypes.string.isRequired,\r\n//     answerOptions: PropTypes.array.isRequired,\r\n//     counter: PropTypes.number.isRequired,\r\n//     question: PropTypes.string.isRequired,\r\n//     questionId: PropTypes.number.isRequired,\r\n//     questionTotal: PropTypes.number.isRequired,\r\n//     onAnswerSelected: PropTypes.func.isRequired\r\n//   };\r\n  \r\n  export default Quiz;"]},"metadata":{},"sourceType":"module"}