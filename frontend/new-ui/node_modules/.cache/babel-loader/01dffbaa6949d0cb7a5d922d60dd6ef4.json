{"ast":null,"code":"var _jsxFileName = \"D:\\\\College\\\\Capstone project\\\\Final\\\\frontend\\\\new-ui\\\\src\\\\components\\\\pages\\\\StudentAssessment.jsx\";\nimport React from 'react';\nimport './studentass.css';\nimport Question from './StudentAssessment/Question';\nimport Quiz from './StudentAssessment/Quiz';\nimport Result from './StudentAssessment/Result';\nimport jwt_decode from 'jwt-decode';\nimport { Link, withRouter } from 'react-router-dom';\nimport Completed from './StudentAssessment/completed_quiz';\n\nclass Sassessment extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      counter: 0,\n      questionId: 1,\n      question: '',\n      answerOptions: '',\n      answer: '',\n      answersCount: {},\n      result: '',\n      mcq: '',\n      correct_answer: '',\n      score: 0,\n      tid: this.props.location.tid,\n      setid: this.props.location.data,\n      topic: this.props.location.topic,\n      total: 0,\n      completed: '',\n      no_of_topics: this.props.location.topic_length\n    }; // console.log(this.state)\n\n    this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\n    this.shuffle = this.shuffle.bind(this); // this.setUserAnswer=this.setUserAnswer.bind(this);\n  }\n\n  shuffle(array) {\n    console.log(\"hi\");\n    var currentIndex = array.length,\n        temporaryValue,\n        randomIndex; // While there remain elements to shuffle...\n\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1; // And swap it with the current element.\n\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  componentWillMount() {\n    fetch('http://localhost:5000/check_set_attempted', {\n      method: 'POST',\n      body: JSON.stringify({\n        'tid': this.state.tid,\n        'set_number': this.state.setid,\n        'username': jwt_decode(localStorage.usertoken).identity.username\n      }),\n      headers: new Headers({\n        \"content-type\": \"application/json\"\n      })\n    }).then(response => {\n      response.json().then(body => {\n        console.log(body);\n\n        if (body.attempted == false) {\n          fetch('http://localhost:5000/get_question_sets', {\n            method: 'POST',\n            body: JSON.stringify({\n              'tid': this.state.tid,\n              'setid': this.state.setid\n            }),\n            headers: new Headers({\n              \"content-type\": \"application/json\"\n            })\n          }).then(response => {\n            response.json().then(body => {\n              console.log(body);\n              this.setState({\n                mcq: body\n              });\n\n              for (var i = 0; i < this.state.mcq.length; i++) {\n                this.state.mcq[i][\"answers\"] = this.shuffle(this.state.mcq[i][\"answers\"]);\n              }\n\n              this.setState({\n                question: this.state.mcq[0][\"question\"],\n                answerOptions: this.state.mcq[0][\"answers\"],\n                correct_answer: this.state.mcq[0][\"correct_answer\"],\n                total: this.state.mcq.length\n              });\n              console.log(this.state);\n            });\n          });\n        } else {\n          this.setState({\n            score: body.score,\n            total: body.total,\n            result: true,\n            question: \"hello\",\n            completed: body.questions\n          });\n        }\n      });\n    });\n  }\n\n  setUserAnswer(answer) {\n    this.setState((state, props) => ({\n      score: this.state.correct_answer === answer ? this.state.score + 1 : this.state.score,\n      answer: answer\n    }));\n    console.log(this.state);\n    fetch('http://localhost:5000/set_answers', {\n      method: 'POST',\n      body: JSON.stringify({\n        'question_number': this.state.tid.toString() + \"_\" + this.state.setid.toString() + \"_\" + this.state.questionId,\n        'answer': answer,\n        'username': jwt_decode(localStorage.usertoken).identity.username,\n        'id': this.state.tid\n      }),\n      headers: new Headers({\n        \"content-type\": \"application/json\"\n      })\n    });\n  }\n\n  setNextQuestion() {\n    console.log(\"setnext\");\n    const counter = this.state.counter + 1;\n    const questionId = this.state.questionId + 1;\n    this.setState({\n      counter: counter,\n      questionId: questionId,\n      question: this.state.mcq[counter][\"question\"],\n      answerOptions: this.state.mcq[counter][\"answers\"],\n      answer: '',\n      correct_answer: this.state.mcq[counter][\"correct_answer\"]\n    });\n  }\n\n  handleAnswerSelected(event) {\n    console.log(\"handle\");\n    this.setUserAnswer(event.currentTarget.value);\n\n    if (this.state.questionId < Object.keys(this.state.mcq).length) {\n      if (this.state.answer === this.state.correct_answer) {\n        setTimeout(() => this.setNextQuestion(), 300);\n      } else {\n        setTimeout(() => this.setNextQuestion(), 3000);\n      }\n    } else {\n      setTimeout(() => this.setResults(this.state.score), 300);\n    }\n  }\n\n  setResults(result) {\n    this.setState({\n      result: true\n    });\n  }\n\n  renderQuiz() {\n    return /*#__PURE__*/React.createElement(Quiz, {\n      answer: this.state.answer,\n      answerOptions: this.state.answerOptions,\n      questionId: this.state.questionId,\n      question: this.state.question,\n      questionTotal: Object.keys(this.state.mcq).length,\n      onAnswerSelected: this.handleAnswerSelected,\n      correct_answer: this.state.correct_answer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }\n    });\n  }\n\n  renderResult() {\n    console.log(this.state);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"center\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }\n    }, \"Your performance\")), this.state.completed ? /*#__PURE__*/React.createElement(Completed, {\n      questions: this.state.completed,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 31\n      }\n    }) : null, /*#__PURE__*/React.createElement(Result, {\n      quizResult: this.state.score,\n      full: this.state.total,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }\n    }), this.state.topic + 1 >= this.state.no_of_topics ? /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 55\n      }\n    }, \"You've completed the tutorial\") : null, /*#__PURE__*/React.createElement(Link, {\n      to: {\n        pathname: \"/ppt\",\n        topic: this.state.topic + 1 >= this.state.no_of_topics ? 0 : this.state.topic + 1,\n        tid: this.state.tid\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn-secondary btn-lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 7\n      }\n    }, \"Go back to tutorial\")));\n  }\n\n  render() {\n    console.log(this.state);\n\n    if (this.state.question) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 10\n        }\n      }, this.state.result ? this.renderResult() : this.renderQuiz());\n    } else {\n      return null;\n    }\n  }\n\n}\n\nexport default Sassessment;","map":{"version":3,"sources":["D:/College/Capstone project/Final/frontend/new-ui/src/components/pages/StudentAssessment.jsx"],"names":["React","Question","Quiz","Result","jwt_decode","Link","withRouter","Completed","Sassessment","Component","constructor","props","state","counter","questionId","question","answerOptions","answer","answersCount","result","mcq","correct_answer","score","tid","location","setid","data","topic","total","completed","no_of_topics","topic_length","handleAnswerSelected","bind","shuffle","array","console","log","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","componentWillMount","fetch","method","body","JSON","stringify","localStorage","usertoken","identity","username","headers","Headers","then","response","json","attempted","setState","i","questions","setUserAnswer","toString","setNextQuestion","event","currentTarget","value","Object","keys","setTimeout","setResults","renderQuiz","renderResult","pathname","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './studentass.css';\r\nimport Question from './StudentAssessment/Question';\r\nimport Quiz from './StudentAssessment/Quiz';\r\nimport Result from './StudentAssessment/Result';\r\nimport jwt_decode from 'jwt-decode';\r\nimport { Link, withRouter } from 'react-router-dom'\r\nimport Completed from './StudentAssessment/completed_quiz'\r\nclass Sassessment extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          counter: 0,\r\n          questionId: 1,\r\n          question: '',\r\n          answerOptions: '',\r\n          answer: '',\r\n          answersCount: {},\r\n          result: '',\r\n          mcq: '',\r\n          correct_answer: '',\r\n          score:0,\r\n          tid: this.props.location.tid,\r\n          setid:this.props.location.data,\r\n          topic:this.props.location.topic,\r\n          total:0,\r\n          completed:'',\r\n          no_of_topics:this.props.location.topic_length\r\n        };\r\n        // console.log(this.state)\r\n        this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\r\n        this.shuffle=this.shuffle.bind(this);\r\n        // this.setUserAnswer=this.setUserAnswer.bind(this);\r\n      }\r\n      shuffle(array) {\r\n        console.log(\"hi\");\r\n        var currentIndex = array.length, temporaryValue, randomIndex;\r\n      \r\n        // While there remain elements to shuffle...\r\n        while (0 !== currentIndex) {\r\n      \r\n          // Pick a remaining element...\r\n          randomIndex = Math.floor(Math.random() * currentIndex);\r\n          currentIndex -= 1;\r\n      \r\n          // And swap it with the current element.\r\n          temporaryValue = array[currentIndex];\r\n          array[currentIndex] = array[randomIndex];\r\n          array[randomIndex] = temporaryValue;\r\n        }\r\n      \r\n        return array;\r\n      }\r\n      componentWillMount(){\r\n        fetch('http://localhost:5000/check_set_attempted', {\r\n      method: 'POST',\r\n      body:JSON.stringify({'tid':this.state.tid,'set_number':this.state.setid,'username':jwt_decode(localStorage.usertoken).identity.username}),\r\n      headers: new Headers({\r\n        \"content-type\": \"application/json\"\r\n      })\r\n    }).then((response) => {\r\n      response.json().then((body) => {\r\n        console.log(body);\r\n        if(body.attempted==false){\r\n        fetch('http://localhost:5000/get_question_sets', {\r\n      method: 'POST',\r\n      body:JSON.stringify({'tid':this.state.tid,'setid':this.state.setid}),\r\n      headers: new Headers({\r\n        \"content-type\": \"application/json\"\r\n      })\r\n    }).then((response) => {\r\n      response.json().then((body) => {\r\n        console.log(body);\r\n        this.setState({mcq:body});\r\n        for(var i=0;i<this.state.mcq.length;i++){\r\n          this.state.mcq[i][\"answers\"]=this.shuffle(this.state.mcq[i][\"answers\"])\r\n        }\r\n        this.setState({question:this.state.mcq[0][\"question\"],answerOptions:this.state.mcq[0][\"answers\"],correct_answer:this.state.mcq[0][\"correct_answer\"],total:this.state.mcq.length});\r\n        console.log(this.state);\r\n    });\r\n    })\r\n  }\r\n  else{\r\n    this.setState({score:body.score,total:body.total,result:true,question:\"hello\",completed:body.questions})\r\n  }\r\n  });\r\n})}\r\n      setUserAnswer(answer) {\r\n        this.setState((state, props) => ({\r\n          score: (this.state.correct_answer===answer)?this.state.score+1:this.state.score,\r\n          answer: answer\r\n        }));\r\n        console.log(this.state)\r\n        fetch('http://localhost:5000/set_answers', {\r\n      method: 'POST',\r\n      body: JSON.stringify({'question_number':this.state.tid.toString()+\"_\"+this.state.setid.toString()+\"_\"+this.state.questionId,'answer':answer,'username':jwt_decode(localStorage.usertoken).identity.username,'id':this.state.tid}),\r\n      headers: new Headers({\r\n        \"content-type\": \"application/json\"\r\n      }),\r\n    })}\r\n      setNextQuestion() {\r\n          console.log(\"setnext\");\r\n        const counter = this.state.counter + 1;\r\n        const questionId = this.state.questionId + 1;\r\n        this.setState({\r\n          counter: counter,\r\n          questionId: questionId,\r\n          question: this.state.mcq[counter][\"question\"],\r\n          answerOptions: this.state.mcq[counter][\"answers\"],\r\n          answer: '',\r\n          correct_answer: this.state.mcq[counter][\"correct_answer\"]\r\n        });\r\n      }\r\n      handleAnswerSelected(event) {\r\n        console.log(\"handle\")\r\n        this.setUserAnswer(event.currentTarget.value);\r\n        if (this.state.questionId < Object.keys(this.state.mcq).length) {\r\n          if(this.state.answer===this.state.correct_answer){\r\n            setTimeout(() => this.setNextQuestion(), 300);\r\n          }\r\n          else{\r\n            setTimeout(() => this.setNextQuestion(), 3000);\r\n          }\r\n          } else {\r\n            setTimeout(() => this.setResults(this.state.score), 300);\r\n          }\r\n      }\r\n    \r\n      setResults(result) {\r\n          this.setState({ result: true });\r\n      }\r\n\r\n    renderQuiz(){\r\n        return (\r\n            <Quiz\r\n        answer={this.state.answer}\r\n        answerOptions={this.state.answerOptions}\r\n        questionId={this.state.questionId}\r\n        question={this.state.question}\r\n        questionTotal={Object.keys(this.state.mcq).length}\r\n        onAnswerSelected={this.handleAnswerSelected}\r\n        correct_answer={this.state.correct_answer}\r\n      />\r\n        );\r\n    }\r\n\r\n    renderResult() {\r\n      console.log(this.state)\r\n      return (<div>\r\n        <center><h1>Your performance</h1></center>\r\n        {this.state.completed?<Completed questions={this.state.completed}/>:null}\r\n        <Result quizResult={this.state.score} full={this.state.total} />\r\n        {this.state.topic+1>=this.state.no_of_topics?(<h1>You've completed the tutorial</h1>):null}\r\n        <Link to={{pathname:\"/ppt\",topic:this.state.topic+1>=this.state.no_of_topics?0:this.state.topic+1,tid:this.state.tid}}>\r\n      <button  className=\"btn-secondary btn-lg\">Go back to tutorial</button></Link>\r\n        </div>);\r\n    }\r\n\r\n    render(){\r\n      console.log(this.state);\r\n      if(this.state.question){\r\n      return (\r\n        (<div>\r\n        {this.state.result ? this.renderResult() : this.renderQuiz()}\r\n        </div>)\r\n      )}\r\n      else{\r\n        return null;\r\n      }\r\n    }\r\n}\r\n\r\nexport default Sassessment;"]},"metadata":{},"sourceType":"module"}